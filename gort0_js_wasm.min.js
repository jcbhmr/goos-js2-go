function E(e, t = {}) {
  return Uint8Array.of();
}
async function T(e) {
  if (globalThis.DecompressionStream) {
    const t = [];
    let n;
    return await new ReadableStream({
      start(o) {
        o.enqueue(e), o.close();
      }
    }).pipeThrough(new DecompressionStream("gzip")).pipeTo(new WritableStream({
      write(o, c) {
        t.push(o);
      },
      close(o) {
        n = new Uint8Array(t.reduce((r, s) => r + s.byteLength, 0));
        let c = 0;
        for (const r of t)
          n.set(r, c), c += r.byteLength;
      }
    })), n;
  } else
    throw new Error("not implemented");
}
function _() {
  let e, t;
  return { promise: new Promise((o, c) => {
    e = o, t = c;
  }), resolve: e, reject: t };
}
function k(e) {
  for (var t = 0, n = Math.min(256 * 256, e.length + 1), o = new Uint16Array(n), c = [], r = 0; ; ) {
    var s = t < e.length;
    if (!s || r >= n - 1) {
      var d = o.subarray(0, r), h = (
        /** @type {number[]} */
        /** @type {unknown} */
        d
      );
      if (c.push(String.fromCharCode.apply(null, h)), !s)
        return c.join("");
      e = e.subarray(t), t = 0, r = 0;
    }
    var a = e[t++];
    if (!(a & 128))
      o[r++] = a;
    else if ((a & 224) === 192) {
      var f = e[t++] & 63;
      o[r++] = (a & 31) << 6 | f;
    } else if ((a & 240) === 224) {
      var f = e[t++] & 63, l = e[t++] & 63;
      o[r++] = (a & 31) << 12 | f << 6 | l;
    } else if ((a & 248) === 240) {
      var f = e[t++] & 63, l = e[t++] & 63, A = e[t++] & 63, u = (a & 7) << 18 | f << 12 | l << 6 | A;
      u > 65535 && (u -= 65536, o[r++] = u >>> 10 & 1023 | 55296, u = 56320 | u & 1023), o[r++] = u;
    }
  }
}
function y(e) {
  for (var t = 0, n = e.length, o = 0, c = Math.max(32, n + (n >>> 1) + 7), r = new Uint8Array(c >>> 3 << 3); t < n; ) {
    var s = e.charCodeAt(t++);
    if (s >= 55296 && s <= 56319) {
      if (t < n) {
        var d = e.charCodeAt(t);
        (d & 64512) === 56320 && (++t, s = ((s & 1023) << 10) + (d & 1023) + 65536);
      }
      if (s >= 55296 && s <= 56319)
        continue;
    }
    if (o + 4 > r.length) {
      c += 8, c *= 1 + t / e.length * 2, c = c >>> 3 << 3;
      var h = new Uint8Array(c);
      h.set(r), r = h;
    }
    if (s & 4294967168)
      if (!(s & 4294965248))
        r[o++] = s >>> 6 & 31 | 192;
      else if (!(s & 4294901760))
        r[o++] = s >>> 12 & 15 | 224, r[o++] = s >>> 6 & 63 | 128;
      else if (!(s & 4292870144))
        r[o++] = s >>> 18 & 7 | 240, r[o++] = s >>> 12 & 63 | 128, r[o++] = s >>> 6 & 63 | 128;
      else
        continue;
    else {
      r[o++] = s;
      continue;
    }
    r[o++] = s & 63 | 128;
  }
  return r.slice ? r.slice(0, o) : r.subarray(0, o);
}
function i() {
  return Object.assign(new Error("ENOSYS: Function not implemented"), {
    code: "ENOSYS"
  });
}
function m(e) {
  throw e;
}
let v = null;
function j(e) {
  return globalThis.TextEncoder ? (v || (v = new TextEncoder()), v.encode(e)) : y(e);
}
let w = null;
function C(e) {
  return globalThis.TextDecoder ? (w || (w = new TextDecoder()), w.decode(e)) : k(e);
}
const D = {
  __proto__: null,
  O_WRONLY: -1,
  O_RDWR: -1,
  O_CREAT: -1,
  O_TRUNC: -1,
  O_APPEND: -1,
  O_EXCL: -1
};
let x = "";
function P(e, t, n, o, c) {
  if (e !== 1 && e !== 2 || n !== 0 || o !== t.length || c !== null)
    throw i();
  x += C(t);
  const r = x.lastIndexOf(`
`);
  if (r !== -1) {
    const s = x.slice(0, r);
    x = x.slice(r + 1), globalThis.console && console.log(s);
  }
  return t.length;
}
function U(e, t, n, o, c, r) {
  let s;
  try {
    s = this.writeSync(e, t, n, o, c);
  } catch (d) {
    r(d);
  }
  r(null, s);
}
const I = (e, t, n) => void n(i()), M = (e, t, n, o) => void o(i()), R = (e, t) => void t(i()), W = (e, t, n) => void n(i()), N = (e, t, n, o) => void o(i()), F = (e, t) => void t(i()), z = (e, t) => void t(null), L = (e, t, n) => void n(i()), Y = (e, t, n, o) => void o(i()), $ = (e, t, n) => void n(i()), B = (e, t) => void t(i()), G = (e, t, n) => void n(i()), V = (e, t, n, o) => void o(i()), q = (e, t, n, o, c, r) => void r(i()), X = (e, t) => void t(i()), Z = (e, t) => void t(i()), H = (e, t, n) => void n(i()), J = (e, t) => void t(i()), K = (e, t) => void t(i()), Q = (e, t, n) => void n(i()), tt = (e, t, n) => void n(i()), et = (e, t) => void t(i()), nt = (e, t, n, o) => void o(i()), S = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  chmod: I,
  chown: M,
  close: R,
  constants: D,
  fchmod: W,
  fchown: N,
  fstat: F,
  fsync: z,
  ftruncate: L,
  lchown: Y,
  link: $,
  lstat: B,
  mkdir: G,
  open: V,
  read: q,
  readdir: X,
  readlink: Z,
  rename: H,
  rmdir: J,
  stat: K,
  symlink: Q,
  truncate: tt,
  unlink: et,
  utimes: nt,
  write: U,
  writeSync: P
}, Symbol.toStringTag, { value: "Module" })), ot = () => -1, rt = () => -1, st = () => -1, it = () => -1, ct = -1, at = -1, ft = () => m(i()), dt = () => m(i()), lt = () => m(i()), ht = () => m(i()), ut = (e = void 0) => {
  e == null ? globalThis.console && g && console.warn(`exit code: ${g}`) : g = e;
};
let g = 0;
const O = {
  __proto__: null,
  getuid: ot,
  getgid: rt,
  geteuid: st,
  getegid: it,
  get pid() {
    return ct;
  },
  get ppid() {
    return at;
  },
  getgroups: ft,
  umask: dt,
  cwd: lt,
  chdir: ht,
  exit: ut,
  get exitCode() {
    return g;
  },
  set exitCode(e) {
    g = e;
  }
};
class xt {
  #t = "created";
  #n;
  #s;
  #c;
  #d;
  #l;
  #h;
  #a;
  #f;
  #u;
  constructor(t = {}) {
    this.#n = t.args ?? ["js"], this.#s = t.env ?? {}, this.#c = t.returnOnExit ?? !0, this.#a = t["node:fs"] ?? S, this.#f = t["node:process"] ?? O;
  }
  getImportObject() {
    return { gojs: this.gojs };
  }
  #o = null;
  get #e() {
    if (!this.#o) {
      const t = this.#i.exports.mem;
      this.#o = new DataView(t.buffer);
    }
    return this.#o;
  }
  gojs = {
    /**
     * ```go
     * func wasmExit(code int32)
     * ```
     * @param {number} sp
     */
    "runtime.wasmExit": (t) => {
      const n = this.#e.getInt32(t + 8, !0);
      this.#t = "exited", this.#r.resolve(n);
    }
  };
  _makeFuncWrapper(t) {
    const n = this;
    return function(...o) {
      return { id: t, this: n, args: o }.result;
    };
  }
  #i = null;
  #r = _();
  async start(t) {
    if (this.#t === "created")
      this.#t = "starting";
    else
      throw new Error("Go#start() called more than once");
    let n = 4096;
    const o = (a) => {
      const f = n, l = j(a + "\0");
      return new Uint8Array(this.#e.buffer, n, l.length).set(l), n += l.length, n % 8 !== 0 && (n += 8 - n % 8), f;
    }, c = this.#n.length, r = [];
    for (const a of this.#n)
      r.push(o(a));
    r.push(0);
    for (const [a, f] of Object.entries(this.#s))
      r.push(o(`${a}=${f}`));
    r.push(0);
    const s = n;
    for (const a of r)
      this.#e.setUint32(n, a, !0), this.#e.setUint32(n + 4, 0, !0), n += 8;
    if (n >= 12288)
      throw new Error("Total length of args and env exceeds limit");
    const h = this.#i.exports.run;
    return this.#t = "running", this.#r = _(), h(c, s), this.#r.promise;
  }
}
const [gt, p] = await Promise.all([
  import("node:fs").catch(() => S),
  import("node:process").catch(() => O)
]), pt = await T(E(__APP_WASM_GZ_BASE64__)), b = Object.assign(
  new xt({
    args: p.argv,
    env: p.env,
    "node:fs": gt,
    "node:process": p
  }),
  {
    _import: (e, t) => import(e),
    _importMeta: import.meta
  }
), { instance: mt } = await WebAssembly.instantiate(pt, b.getImportObject()), vt = await b.start(mt);
p.exitCode = vt;
