function k(e) {
  for (var t = 0, n = Math.min(256 * 256, e.length + 1), o = new Uint16Array(n), c = [], r = 0; ; ) {
    var s = t < e.length;
    if (!s || r >= n - 1) {
      var f = o.subarray(0, r), d = (
        /** @type {number[]} */
        /** @type {unknown} */
        f
      );
      if (c.push(String.fromCharCode.apply(null, d)), !s)
        return c.join("");
      e = e.subarray(t), t = 0, r = 0;
    }
    var a = e[t++];
    if (!(a & 128))
      o[r++] = a;
    else if ((a & 224) === 192) {
      var l = e[t++] & 63;
      o[r++] = (a & 31) << 6 | l;
    } else if ((a & 240) === 224) {
      var l = e[t++] & 63, h = e[t++] & 63;
      o[r++] = (a & 31) << 12 | l << 6 | h;
    } else if ((a & 248) === 240) {
      var l = e[t++] & 63, h = e[t++] & 63, E = e[t++] & 63, x = (a & 7) << 18 | l << 12 | h << 6 | E;
      x > 65535 && (x -= 65536, o[r++] = x >>> 10 & 1023 | 55296, x = 56320 | x & 1023), o[r++] = x;
    }
  }
}
function j(e) {
  for (var t = 0, n = e.length, o = 0, c = Math.max(32, n + (n >>> 1) + 7), r = new Uint8Array(c >>> 3 << 3); t < n; ) {
    var s = e.charCodeAt(t++);
    if (s >= 55296 && s <= 56319) {
      if (t < n) {
        var f = e.charCodeAt(t);
        (f & 64512) === 56320 && (++t, s = ((s & 1023) << 10) + (f & 1023) + 65536);
      }
      if (s >= 55296 && s <= 56319)
        continue;
    }
    if (o + 4 > r.length) {
      c += 8, c *= 1 + t / e.length * 2, c = c >>> 3 << 3;
      var d = new Uint8Array(c);
      d.set(r), r = d;
    }
    if (s & 4294967168)
      if (!(s & 4294965248))
        r[o++] = s >>> 6 & 31 | 192;
      else if (!(s & 4294901760))
        r[o++] = s >>> 12 & 15 | 224, r[o++] = s >>> 6 & 63 | 128;
      else if (!(s & 4292870144))
        r[o++] = s >>> 18 & 7 | 240, r[o++] = s >>> 12 & 63 | 128, r[o++] = s >>> 6 & 63 | 128;
      else
        continue;
    else {
      r[o++] = s;
      continue;
    }
    r[o++] = s & 63 | 128;
  }
  return r.slice ? r.slice(0, o) : r.subarray(0, o);
}
function i() {
  return Object.assign(new Error("ENOSYS: Function not implemented"), {
    code: "ENOSYS"
  });
}
function v(e) {
  throw e;
}
let _ = null;
function b(e) {
  return globalThis.TextEncoder ? (_ || (_ = new TextEncoder()), _.encode(e)) : j(e);
}
let A = null;
function T(e) {
  return globalThis.TextDecoder ? (A || (A = new TextDecoder()), A.decode(e)) : k(e);
}
const D = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", u = Object.fromEntries(
  Array.from(D).map((e, t) => [e.charCodeAt(0), t])
);
u[61] = 0;
u[45] = 62;
u[95] = 63;
function P(e, t = {}) {
  e = e.replace(/=/g, "");
  const n = e.length, o = n % 4, c = o && o - 1, r = (n >> 2) * 3 + c, s = b(e + "===");
  for (let f = 0, d = 0; f < n; f += 4, d += 3) {
    const a = (u[s[f]] << 18) + (u[s[f + 1]] << 12) + (u[s[f + 2]] << 6) + u[s[f + 3]];
    s[d] = a >> 16, s[d + 1] = a >> 8 & 255, s[d + 2] = a & 255;
  }
  return new Uint8Array(s.buffer, 0, r);
}
async function U(e) {
  if (globalThis.DecompressionStream) {
    const t = [];
    let n;
    return await new ReadableStream({
      start(o) {
        o.enqueue(e), o.close();
      }
    }).pipeThrough(new DecompressionStream("gzip")).pipeTo(new WritableStream({
      write(o, c) {
        t.push(o);
      },
      close(o) {
        n = new Uint8Array(t.reduce((r, s) => r + s.byteLength, 0));
        let c = 0;
        for (const r of t)
          n.set(r, c), c += r.byteLength;
      }
    })), n;
  } else
    throw new Error("not implemented");
}
function S() {
  let e, t;
  return { promise: new Promise((o, c) => {
    e = o, t = c;
  }), resolve: e, reject: t };
}
const I = {
  __proto__: null,
  O_WRONLY: -1,
  O_RDWR: -1,
  O_CREAT: -1,
  O_TRUNC: -1,
  O_APPEND: -1,
  O_EXCL: -1
};
let p = "";
function M(e, t, n, o, c) {
  if (e !== 1 && e !== 2 || n !== 0 || o !== t.length || c !== null)
    throw i();
  p += T(t);
  const r = p.lastIndexOf(`
`);
  if (r !== -1) {
    const s = p.slice(0, r);
    p = p.slice(r + 1), globalThis.console && console.log(s);
  }
  return t.length;
}
function R(e, t, n, o, c, r) {
  let s;
  try {
    s = this.writeSync(e, t, n, o, c);
  } catch (f) {
    r(f);
  }
  r(null, s);
}
const W = (e, t, n) => void n(i()), F = (e, t, n, o) => void o(i()), N = (e, t) => void t(i()), z = (e, t, n) => void n(i()), L = (e, t, n, o) => void o(i()), Y = (e, t) => void t(i()), B = (e, t) => void t(null), G = (e, t, n) => void n(i()), V = (e, t, n, o) => void o(i()), $ = (e, t, n) => void n(i()), q = (e, t) => void t(i()), X = (e, t, n) => void n(i()), Z = (e, t, n, o) => void o(i()), H = (e, t, n, o, c, r) => void r(i()), J = (e, t) => void t(i()), K = (e, t) => void t(i()), Q = (e, t, n) => void n(i()), tt = (e, t) => void t(i()), et = (e, t) => void t(i()), nt = (e, t, n) => void n(i()), ot = (e, t, n) => void n(i()), rt = (e, t) => void t(i()), st = (e, t, n, o) => void o(i()), y = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  chmod: W,
  chown: F,
  close: N,
  constants: I,
  fchmod: z,
  fchown: L,
  fstat: Y,
  fsync: B,
  ftruncate: G,
  lchown: V,
  link: $,
  lstat: q,
  mkdir: X,
  open: Z,
  read: H,
  readdir: J,
  readlink: K,
  rename: Q,
  rmdir: tt,
  stat: et,
  symlink: nt,
  truncate: ot,
  unlink: rt,
  utimes: st,
  write: R,
  writeSync: M
}, Symbol.toStringTag, { value: "Module" })), it = () => -1, ct = () => -1, at = () => -1, ft = () => -1, dt = -1, lt = -1, ht = () => v(i()), ut = () => v(i()), xt = () => v(i()), pt = () => v(i()), gt = (e = void 0) => {
  e == null ? globalThis.console && g && console.warn(`exit code: ${g}`) : g = e;
};
let g = 0;
const C = {
  __proto__: null,
  getuid: it,
  getgid: ct,
  geteuid: at,
  getegid: ft,
  get pid() {
    return dt;
  },
  get ppid() {
    return lt;
  },
  getgroups: ht,
  umask: ut,
  cwd: xt,
  chdir: pt,
  exit: gt,
  get exitCode() {
    return g;
  },
  set exitCode(e) {
    g = e;
  }
};
let w;
try {
  w = new Function("s", "o", "return import(s)");
} catch {
  w = null;
}
class mt {
  #t = "created";
  #n;
  #s;
  #c;
  #a;
  #f;
  #d;
  constructor(t = {}) {
    this.#n = t.args ?? ["js"], this.#s = t.env ?? {}, this.#c = t.returnOnExit ?? !0, this.#a = t["node:fs"] ?? y, this.#f = t["node:process"] ?? C;
  }
  getImportObject() {
    return { gojs: this.gojs };
  }
  #o = null;
  get #e() {
    if (!this.#o) {
      const t = this.#i.exports.mem;
      this.#o = new DataView(t.buffer);
    }
    return this.#o;
  }
  gojs = {
    // func wasmExit(code int32)
    "runtime.wasmExit": (t) => {
      const n = this.#e.getInt32(t + 8, !0);
      this.#t = "exited", this.#r.resolve(n);
    }
  };
  _makeFuncWrapper(t) {
    const n = this;
    return function(...o) {
      return { id: t, this: n, args: o }.result;
    };
  }
  async _import(t, n) {
    return w ? w(t, n) : import(t);
  }
  #i = null;
  #r = S();
  async start(t) {
    if (this.#t === "created")
      this.#t = "starting";
    else
      throw new Error("Go#start() called more than once");
    let n = 4096;
    const o = (a) => {
      const l = n, h = b(a + "\0");
      return new Uint8Array(this.#e.buffer, n, h.length).set(h), n += h.length, n % 8 !== 0 && (n += 8 - n % 8), l;
    }, c = this.#n.length, r = [];
    for (const a of this.#n)
      r.push(o(a));
    r.push(0);
    for (const [a, l] of Object.entries(this.#s))
      r.push(o(`${a}=${l}`));
    r.push(0);
    const s = n;
    for (const a of r)
      this.#e.setUint32(n, a, !0), this.#e.setUint32(n + 4, 0, !0), n += 8;
    if (n >= 12288)
      throw new Error("Total length of args and env exceeds limit");
    const d = this.#i.exports.run;
    return this.#t = "running", this.#r = S(), d(c, s), this.#r.promise;
  }
}
const [wt, m] = await Promise.all([
  import("node:fs").catch(() => y),
  import("node:process").catch(() => C)
]), vt = await U(P(__APP_WASM_GZ_BASE64__)), O = Object.assign(
  new mt({
    args: m.argv,
    env: m.env,
    "node:fs": wt,
    "node:process": m
  }),
  { _importMeta: import.meta }
);
O._import = (e, t) => import(e);
const { instance: _t } = await WebAssembly.instantiate(vt, O.getImportObject()), At = await O.start(_t);
m.exitCode = At;
